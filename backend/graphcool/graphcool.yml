# Welcome to Graphcool!
#
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip


# In the types.graphql you define your data schema
types: ./types.graphql

functions:
  # hello:
  #   handler:
  #     code: src/hello.js
  #   type: resolver
  #   schema: src/hello.graphql

  # This resolver allows to create a new user with the
  # `signupUser`-mutation defined in `signup.graphql`.
  signup:
    type: resolver
    schema: src/signup.graphql
    handler:
      code:
        src: src/signup.js

  # This resolver allows to retrieve a node token using the
  # `authenticateUser`-mutation defined in `authenticate.graphql`.
  authenticate:
    type: resolver
    schema: src/authenticate.graphql
    handler:
      code:
        src: src/authenticate.js

  # This resolver allows to check whether a request belongs to a
  # currently authenticated `User` node using the
  # `loggedInUser` query defined in `loggedInUser.graphql`.
  loggedInUser:
    type: resolver
    schema: src/loggedInUser.graphql
    handler:
      code:
        src: src/loggedInUser.js


# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:
  # - operation: Post.read
  #   authenticated: true
  # - operation: User.read
  #   authenticated: true
  - operation: "*"
    authenticated: true


# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
rootTokens:
  - signup
  - authenticate
  - loggedInUser
